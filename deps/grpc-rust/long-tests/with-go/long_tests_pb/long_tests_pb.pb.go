// Code generated by protoc-gen-go.
// source: long_tests_pb.proto
// DO NOT EDIT!

/*
Package long_tests_pb is a generated protocol buffer package.

It is generated from these files:
	long_tests_pb.proto

It has these top-level messages:
	EchoRequest
	EchoResponse
	CharCountRequest
	CharCountResponse
	RandomStringsRequest
	RandomStringsResponse
*/
package long_tests_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Payload string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EchoResponse struct {
	Payload string `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CharCountRequest struct {
	Part string `protobuf:"bytes,1,opt,name=part" json:"part,omitempty"`
}

func (m *CharCountRequest) Reset()                    { *m = CharCountRequest{} }
func (m *CharCountRequest) String() string            { return proto.CompactTextString(m) }
func (*CharCountRequest) ProtoMessage()               {}
func (*CharCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CharCountResponse struct {
	CharCount uint64 `protobuf:"varint,1,opt,name=char_count,json=charCount" json:"char_count,omitempty"`
}

func (m *CharCountResponse) Reset()                    { *m = CharCountResponse{} }
func (m *CharCountResponse) String() string            { return proto.CompactTextString(m) }
func (*CharCountResponse) ProtoMessage()               {}
func (*CharCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RandomStringsRequest struct {
	Count uint64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *RandomStringsRequest) Reset()                    { *m = RandomStringsRequest{} }
func (m *RandomStringsRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomStringsRequest) ProtoMessage()               {}
func (*RandomStringsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type RandomStringsResponse struct {
	S string `protobuf:"bytes,1,opt,name=s" json:"s,omitempty"`
}

func (m *RandomStringsResponse) Reset()                    { *m = RandomStringsResponse{} }
func (m *RandomStringsResponse) String() string            { return proto.CompactTextString(m) }
func (*RandomStringsResponse) ProtoMessage()               {}
func (*RandomStringsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*EchoRequest)(nil), "EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "EchoResponse")
	proto.RegisterType((*CharCountRequest)(nil), "CharCountRequest")
	proto.RegisterType((*CharCountResponse)(nil), "CharCountResponse")
	proto.RegisterType((*RandomStringsRequest)(nil), "RandomStringsRequest")
	proto.RegisterType((*RandomStringsResponse)(nil), "RandomStringsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for LongTests service

type LongTestsClient interface {
	// simple RPC
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// client streaming
	CharCount(ctx context.Context, opts ...grpc.CallOption) (LongTests_CharCountClient, error)
	// server streaming
	RandomStrings(ctx context.Context, in *RandomStringsRequest, opts ...grpc.CallOption) (LongTests_RandomStringsClient, error)
}

type longTestsClient struct {
	cc *grpc.ClientConn
}

func NewLongTestsClient(cc *grpc.ClientConn) LongTestsClient {
	return &longTestsClient{cc}
}

func (c *longTestsClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/LongTests/echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longTestsClient) CharCount(ctx context.Context, opts ...grpc.CallOption) (LongTests_CharCountClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LongTests_serviceDesc.Streams[0], c.cc, "/LongTests/char_count", opts...)
	if err != nil {
		return nil, err
	}
	x := &longTestsCharCountClient{stream}
	return x, nil
}

type LongTests_CharCountClient interface {
	Send(*CharCountRequest) error
	CloseAndRecv() (*CharCountResponse, error)
	grpc.ClientStream
}

type longTestsCharCountClient struct {
	grpc.ClientStream
}

func (x *longTestsCharCountClient) Send(m *CharCountRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *longTestsCharCountClient) CloseAndRecv() (*CharCountResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CharCountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *longTestsClient) RandomStrings(ctx context.Context, in *RandomStringsRequest, opts ...grpc.CallOption) (LongTests_RandomStringsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LongTests_serviceDesc.Streams[1], c.cc, "/LongTests/random_strings", opts...)
	if err != nil {
		return nil, err
	}
	x := &longTestsRandomStringsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LongTests_RandomStringsClient interface {
	Recv() (*RandomStringsResponse, error)
	grpc.ClientStream
}

type longTestsRandomStringsClient struct {
	grpc.ClientStream
}

func (x *longTestsRandomStringsClient) Recv() (*RandomStringsResponse, error) {
	m := new(RandomStringsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for LongTests service

type LongTestsServer interface {
	// simple RPC
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// client streaming
	CharCount(LongTests_CharCountServer) error
	// server streaming
	RandomStrings(*RandomStringsRequest, LongTests_RandomStringsServer) error
}

func RegisterLongTestsServer(s *grpc.Server, srv LongTestsServer) {
	s.RegisterService(&_LongTests_serviceDesc, srv)
}

func _LongTests_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongTestsServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LongTests/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongTestsServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LongTests_CharCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LongTestsServer).CharCount(&longTestsCharCountServer{stream})
}

type LongTests_CharCountServer interface {
	SendAndClose(*CharCountResponse) error
	Recv() (*CharCountRequest, error)
	grpc.ServerStream
}

type longTestsCharCountServer struct {
	grpc.ServerStream
}

func (x *longTestsCharCountServer) SendAndClose(m *CharCountResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *longTestsCharCountServer) Recv() (*CharCountRequest, error) {
	m := new(CharCountRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LongTests_RandomStrings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomStringsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LongTestsServer).RandomStrings(m, &longTestsRandomStringsServer{stream})
}

type LongTests_RandomStringsServer interface {
	Send(*RandomStringsResponse) error
	grpc.ServerStream
}

type longTestsRandomStringsServer struct {
	grpc.ServerStream
}

func (x *longTestsRandomStringsServer) Send(m *RandomStringsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LongTests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LongTests",
	HandlerType: (*LongTestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echo",
			Handler:    _LongTests_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "char_count",
			Handler:       _LongTests_CharCount_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "random_strings",
			Handler:       _LongTests_RandomStrings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("long_tests_pb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x89, 0x54, 0xa5, 0xc7, 0x2a, 0x2e, 0x6e, 0x32, 0x0a, 0x82, 0x44, 0xd4, 0x5e, 0x48,
	0x90, 0x89, 0x0f, 0x20, 0xc3, 0x3b, 0xaf, 0xaa, 0xf7, 0x25, 0xcb, 0x42, 0x2b, 0xcc, 0x9c, 0x98,
	0x93, 0x5d, 0xf8, 0x4a, 0x3e, 0xa5, 0xac, 0x7f, 0x20, 0x9b, 0xbb, 0xeb, 0x29, 0xbf, 0x7c, 0xf9,
	0x7d, 0x27, 0x70, 0xb1, 0x42, 0x5b, 0x57, 0xc1, 0x50, 0xa0, 0xca, 0x2d, 0xa4, 0xf3, 0x18, 0x50,
	0xdc, 0xc3, 0xc9, 0xab, 0x6e, 0xb0, 0x34, 0xdf, 0x6b, 0x43, 0x81, 0x4f, 0xe1, 0xd8, 0xa9, 0x9f,
	0x15, 0xaa, 0xe5, 0x94, 0x5d, 0xb3, 0x22, 0x2d, 0x87, 0x51, 0x14, 0x90, 0x75, 0x20, 0x39, 0xb4,
	0x64, 0x62, 0xf2, 0x60, 0x9b, 0xbc, 0x83, 0xf3, 0x79, 0xa3, 0xfc, 0x1c, 0xd7, 0x36, 0x0c, 0xb9,
	0x1c, 0x12, 0xa7, 0x7c, 0xe8, 0x43, 0xdb, 0x6f, 0x31, 0x83, 0x51, 0xc4, 0xf5, 0xb1, 0x57, 0x00,
	0xba, 0x51, 0xbe, 0xd2, 0x9b, 0xbf, 0x2d, 0x9e, 0x94, 0xa9, 0x1e, 0x30, 0xf1, 0x00, 0xe3, 0x52,
	0xd9, 0x25, 0x7e, 0xbd, 0x07, 0xff, 0x69, 0x6b, 0x1a, 0xf2, 0xc7, 0x70, 0x18, 0x9f, 0xe8, 0x06,
	0x71, 0x0b, 0x93, 0x1d, 0xba, 0xbf, 0x25, 0x03, 0x46, 0xbd, 0x0b, 0xa3, 0xd9, 0x2f, 0x83, 0xf4,
	0x0d, 0x6d, 0xfd, 0xb1, 0x59, 0x0d, 0xbf, 0x81, 0xc4, 0xe8, 0x06, 0x79, 0x26, 0xa3, 0xc5, 0xe4,
	0xa7, 0x72, 0xab, 0xfd, 0x73, 0xac, 0xc9, 0x47, 0x72, 0xb7, 0x70, 0xce, 0xe5, 0xbf, 0x6e, 0x05,
	0xe3, 0x2f, 0x70, 0xe6, 0x5b, 0xa1, 0x8a, 0x3a, 0x23, 0x3e, 0x91, 0xfb, 0xfa, 0xe4, 0x97, 0x72,
	0xaf, 0xf8, 0x23, 0x5b, 0x1c, 0xb5, 0xef, 0xf6, 0xf4, 0x17, 0x00, 0x00, 0xff, 0xff, 0x7f, 0xcb,
	0x96, 0x48, 0xce, 0x01, 0x00, 0x00,
}
